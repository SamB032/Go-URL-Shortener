// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockDbinterface is an autogenerated mock type for the DBInterface type
type MockDbinterface struct {
	mock.Mock
}

type MockDbinterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDbinterface) EXPECT() *MockDbinterface_Expecter {
	return &MockDbinterface_Expecter{mock: &_m.Mock}
}

// AddRecord provides a mock function with given fields: oldurl, shortKey
func (_m *MockDbinterface) AddRecord(oldurl string, shortKey string) error {
	ret := _m.Called(oldurl, shortKey)

	if len(ret) == 0 {
		panic("no return value specified for AddRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(oldurl, shortKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDbinterface_AddRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRecord'
type MockDbinterface_AddRecord_Call struct {
	*mock.Call
}

// AddRecord is a helper method to define mock.On call
//   - oldurl string
//   - shortKey string
func (_e *MockDbinterface_Expecter) AddRecord(oldurl interface{}, shortKey interface{}) *MockDbinterface_AddRecord_Call {
	return &MockDbinterface_AddRecord_Call{Call: _e.mock.On("AddRecord", oldurl, shortKey)}
}

func (_c *MockDbinterface_AddRecord_Call) Run(run func(oldurl string, shortKey string)) *MockDbinterface_AddRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockDbinterface_AddRecord_Call) Return(_a0 error) *MockDbinterface_AddRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDbinterface_AddRecord_Call) RunAndReturn(run func(string, string) error) *MockDbinterface_AddRecord_Call {
	_c.Call.Return(run)
	return _c
}

// CheckIfURLExists provides a mock function with given fields: url
func (_m *MockDbinterface) CheckIfURLExists(url string) (bool, error) {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for CheckIfURLExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDbinterface_CheckIfURLExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckIfURLExists'
type MockDbinterface_CheckIfURLExists_Call struct {
	*mock.Call
}

// CheckIfURLExists is a helper method to define mock.On call
//   - url string
func (_e *MockDbinterface_Expecter) CheckIfURLExists(url interface{}) *MockDbinterface_CheckIfURLExists_Call {
	return &MockDbinterface_CheckIfURLExists_Call{Call: _e.mock.On("CheckIfURLExists", url)}
}

func (_c *MockDbinterface_CheckIfURLExists_Call) Run(run func(url string)) *MockDbinterface_CheckIfURLExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDbinterface_CheckIfURLExists_Call) Return(_a0 bool, _a1 error) *MockDbinterface_CheckIfURLExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDbinterface_CheckIfURLExists_Call) RunAndReturn(run func(string) (bool, error)) *MockDbinterface_CheckIfURLExists_Call {
	_c.Call.Return(run)
	return _c
}

// CheckShortkeyExists provides a mock function with given fields: shortKey
func (_m *MockDbinterface) CheckShortkeyExists(shortKey string) (bool, error) {
	ret := _m.Called(shortKey)

	if len(ret) == 0 {
		panic("no return value specified for CheckShortkeyExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(shortKey)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(shortKey)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(shortKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDbinterface_CheckShortkeyExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckShortkeyExists'
type MockDbinterface_CheckShortkeyExists_Call struct {
	*mock.Call
}

// CheckShortkeyExists is a helper method to define mock.On call
//   - shortKey string
func (_e *MockDbinterface_Expecter) CheckShortkeyExists(shortKey interface{}) *MockDbinterface_CheckShortkeyExists_Call {
	return &MockDbinterface_CheckShortkeyExists_Call{Call: _e.mock.On("CheckShortkeyExists", shortKey)}
}

func (_c *MockDbinterface_CheckShortkeyExists_Call) Run(run func(shortKey string)) *MockDbinterface_CheckShortkeyExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDbinterface_CheckShortkeyExists_Call) Return(_a0 bool, _a1 error) *MockDbinterface_CheckShortkeyExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDbinterface_CheckShortkeyExists_Call) RunAndReturn(run func(string) (bool, error)) *MockDbinterface_CheckShortkeyExists_Call {
	_c.Call.Return(run)
	return _c
}

// FindShortkeyUsingURL provides a mock function with given fields: url
func (_m *MockDbinterface) FindShortkeyUsingURL(url string) (string, error) {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for FindShortkeyUsingURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDbinterface_FindShortkeyUsingURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindShortkeyUsingURL'
type MockDbinterface_FindShortkeyUsingURL_Call struct {
	*mock.Call
}

// FindShortkeyUsingURL is a helper method to define mock.On call
//   - url string
func (_e *MockDbinterface_Expecter) FindShortkeyUsingURL(url interface{}) *MockDbinterface_FindShortkeyUsingURL_Call {
	return &MockDbinterface_FindShortkeyUsingURL_Call{Call: _e.mock.On("FindShortkeyUsingURL", url)}
}

func (_c *MockDbinterface_FindShortkeyUsingURL_Call) Run(run func(url string)) *MockDbinterface_FindShortkeyUsingURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDbinterface_FindShortkeyUsingURL_Call) Return(_a0 string, _a1 error) *MockDbinterface_FindShortkeyUsingURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDbinterface_FindShortkeyUsingURL_Call) RunAndReturn(run func(string) (string, error)) *MockDbinterface_FindShortkeyUsingURL_Call {
	_c.Call.Return(run)
	return _c
}

// FindURLUsingShortkey provides a mock function with given fields: shortKey
func (_m *MockDbinterface) FindURLUsingShortkey(shortKey string) (string, error) {
	ret := _m.Called(shortKey)

	if len(ret) == 0 {
		panic("no return value specified for FindURLUsingShortkey")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(shortKey)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(shortKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(shortKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDbinterface_FindURLUsingShortkey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindURLUsingShortkey'
type MockDbinterface_FindURLUsingShortkey_Call struct {
	*mock.Call
}

// FindURLUsingShortkey is a helper method to define mock.On call
//   - shortKey string
func (_e *MockDbinterface_Expecter) FindURLUsingShortkey(shortKey interface{}) *MockDbinterface_FindURLUsingShortkey_Call {
	return &MockDbinterface_FindURLUsingShortkey_Call{Call: _e.mock.On("FindURLUsingShortkey", shortKey)}
}

func (_c *MockDbinterface_FindURLUsingShortkey_Call) Run(run func(shortKey string)) *MockDbinterface_FindURLUsingShortkey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDbinterface_FindURLUsingShortkey_Call) Return(_a0 string, _a1 error) *MockDbinterface_FindURLUsingShortkey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDbinterface_FindURLUsingShortkey_Call) RunAndReturn(run func(string) (string, error)) *MockDbinterface_FindURLUsingShortkey_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDbinterface creates a new instance of MockDbinterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDbinterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDbinterface {
	mock := &MockDbinterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
